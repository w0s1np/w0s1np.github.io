<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on w0s1np&#39;s blog</title>
    <link>http://localhost:1313/tags/java/</link>
    <description>Recent content in Java on w0s1np&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 22 Apr 2025 14:34:57 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Thymeleaf 模版注入</title>
      <link>http://localhost:1313/post/thymeleaf-%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Tue, 22 Apr 2025 14:34:57 +0800</pubDate>
      <guid>http://localhost:1313/post/thymeleaf-%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5/</guid>
      <description>&lt;p&gt;跟着网上学习了一下thymeleaf模版注入,其实主要就是分析Spirng MVC框架在处理HTTP请求的时候,如何根据url寻找对应的处理器进行处理(即Controller实现的具体方法), 再看如何对返回的ModelAndView进行渲染的;&lt;/p&gt;&#xA;&lt;p&gt;这个漏洞的利用点就是若用户可控Controller返回的视图值, 那在使用ThymeleafView渲染的时候, 就会进行预处理最后通过SPEL执行表达式.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Agent 内存马</title>
      <link>http://localhost:1313/post/java-agent-%E5%86%85%E5%AD%98%E9%A9%AC/</link>
      <pubDate>Mon, 21 Apr 2025 13:50:08 +0800</pubDate>
      <guid>http://localhost:1313/post/java-agent-%E5%86%85%E5%AD%98%E9%A9%AC/</guid>
      <description></description>
    </item>
    <item>
      <title>Java反序列化绕WAF</title>
      <link>http://localhost:1313/post/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95waf/</link>
      <pubDate>Sat, 19 Apr 2025 20:49:33 +0800</pubDate>
      <guid>http://localhost:1313/post/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95waf/</guid>
      <description></description>
    </item>
  </channel>
</rss>
